<#@ template  debug="false" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(SolutionDir)\Sudoku.ApplicationLayer\bin\Debug\Sudoku.ApplicationLayer.dll" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Sudoku.ApplicationLayer.Models" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    foreach (var modelType in GetModelTypes())
    {
		if(modelType.IsClass &&  modelType.Name == "SudokuCell")
        {
			var simpleProperties = modelType.GetProperties().Where(p => p.PropertyType.IsValueType
										 || p.PropertyType == typeof(string) 
										 ||  p.PropertyType == typeof(IEnumerable<string>)
										 || p.PropertyType == typeof(byte[])).ToList();

			var complexProperties = modelType.GetProperties().Except(simpleProperties)
									.Where(p => p.PropertyType.IsClass && !typeof(IEnumerable).IsAssignableFrom(p.PropertyType)).ToList();

			var collectionProperties = modelType.GetProperties()
										.Except(simpleProperties)
										.Except(complexProperties)										
										.Where(p => p.PropertyType.IsGenericType).ToList();
			
#>using System;
using System.Linq;
using Sudoku.ApplicationLayer.Models;

namespace Sudoku.Client.Wrapper
{
	public partial class <#=modelType.Name.Replace("tbl", "")#>Wrapper : ModelWrapper<<#=modelType.Name#>>
	{	
		public <#=modelType.Name.Replace("tbl", "")#>Wrapper(<#=modelType.Name#> model ) : base (model)
		{
			
		}

<#
		GenerateSimpleProperties(simpleProperties);
			
		GenerateComplexProperties(complexProperties);
		
		if(modelType.Name != "Status")
			GenerateCollectionProperties(collectionProperties);
		
		GenerateInitializeComplexProperties(modelType.Name, complexProperties);
		
		if(modelType.Name != "Status")
			GenerateInitializeCollectionProperties(modelType.Name, collectionProperties);
#>
	}	
}
<#			SaveGeneratedCodeAsFile(modelType.Name.Replace("tbl", "") + "Wrapper.g.cs");
		}		
    }
#>

<#+
	private IEnumerable<Type> GetModelTypes()
	{
		return typeof(SudokuCell).Assembly.GetTypes();
	}

	private void SaveGeneratedCodeAsFile(string fileName)
    {
		string dir = Path.GetDirectoryName(Host.TemplateFile);

		string outputFilePath = Path.Combine(dir, fileName);
		File.WriteAllText(outputFilePath, GenerationEnvironment.ToString());

		GenerationEnvironment.Clear();
    }

	private string GetTypeName(Type type)
    {
		if(type.IsGenericType)
        {
			var genericArguments = type.GetGenericArguments().Select(t => GetTypeName(t)).ToArray();
			var typeDefinition = type.GetGenericTypeDefinition().FullName;
			typeDefinition = typeDefinition.Substring(0, typeDefinition.IndexOf('`'));
			return string.Format("{0}<{1}>", typeDefinition, string.Join(",", genericArguments));
		}
		else
        {
			return type.FullName;
        }
    }

	private void GenerateSimpleProperties(IEnumerable<PropertyInfo> properties)
    {
        foreach (var property in properties)
        {
			var propertyType = GetTypeName(property.PropertyType);
			var propertyName = property.Name;
			if (propertyName == "ObjectState") continue;
#>

		public <#=propertyType#> <#=propertyName#>
		{
			get { return GetValue<<#=propertyType#>>(); }
			set { SetValue(value); }
		}
			
		public <#=propertyType#> <#=propertyName#>OriginalValue => GetOriginalValue<<#=propertyType#>>(nameof(<#=propertyName#>));

		public bool <#=propertyName#>IsChanged => GetIsChanged(nameof(<#=propertyName#>));
<#+
        }
    }

	private void GenerateComplexProperties(IEnumerable<PropertyInfo> properties)
	{
		foreach (var property in properties)
		{
		  var propertyType = property.PropertyType.Name;
		  var propertyName= property.Name;
#>
 
		public <#= propertyType.Replace("tbl", "") #>Wrapper <#= propertyName.Replace("tbl", "") #> { get; private set; }
<#+   
		}
	}

	private void GenerateCollectionProperties(IEnumerable<PropertyInfo> properties)
    {
	
        foreach (var property in properties)
        {
			var itemType = property.PropertyType.GenericTypeArguments[0].Name;
			var propertyName = property.Name;
			
#>
		public ChangeTrackingCollection<<#= itemType.Replace("tbl", "") #>Wrapper> <#= propertyName.Replace("tbl", "") #> { get; private set; }
<#+
        }
    }

	  private void GenerateInitializeComplexProperties(string modelTypeName, IEnumerable<PropertyInfo> properties)
	  {
		if(properties.Any())
		{
#>
    
		protected override void InitializeComplexProperties(<#= modelTypeName #> model)
		{
<#+
			foreach (var complexProperty in properties)
			{
			var propertyName = complexProperty.Name;
			var propertyType = complexProperty.PropertyType.Name;
#>
			if (model.<#= propertyName #> == null)
			{
				throw new ArgumentException("<#= propertyName #> cannot be null");
			}
			<#= propertyName.Replace("tbl", "") #> = new <#= propertyName.Replace("tbl", "") #>Wrapper(model.<#= propertyName #>);
			RegisterComplex(<#= propertyName.Replace("tbl", "") #>);
<#+
			}
#>
		}
<#+
    }
  }

	private void GenerateInitializeCollectionProperties(string modelTypeName, IEnumerable<System.Reflection.PropertyInfo> properties)
	{
		if(properties.Any())
		{
#>

		protected override void InitializeCollectionProperties(<#= modelTypeName#> model)
		{
<#+
		foreach(var property in properties)
		{
		var itemType = property.PropertyType.GenericTypeArguments[0].Name;
		itemType = itemType.Replace("tbl", "");
		var propertyName = property.Name;
		   
#>
			if (model.<#= propertyName #> == null)
			{
				throw new ArgumentException("<#= propertyName#> cannot be null");
			}
 
			<#= propertyName.Replace("tbl", "") #> = new ChangeTrackingCollection<<#= itemType #>Wrapper>(
			model.<#= propertyName #>.Select(e => new <#= itemType #>Wrapper(e)));
			RegisterCollection(<#= propertyName.Replace("tbl", "") #>, model.<#= propertyName #>);
<#+
		}
#>
		}
<#+
    }
  }
#>
